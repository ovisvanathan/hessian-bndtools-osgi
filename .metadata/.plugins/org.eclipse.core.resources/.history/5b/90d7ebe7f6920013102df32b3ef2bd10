package decl.client;

import org.osgi.framework.BundleActivator;
import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceReference;
import org.osgi.service.http.HttpService;
import org.osgi.service.log.LogService;
import org.osgi.util.tracker.ServiceTracker;

import decl.api.IService;

public class HttpActivator implements BundleActivator  {
	
		 private Client consumer;
		 LogService logService;
		 
		 ServiceTracker httpTracker;

		 ServiceTracker apiTracker;

		 ServiceTracker logServiceTracker;
		 BundleContext context;
		 
		    @Override
		    public void start(BundleContext bundleContext) throws Exception {
		      /*
		    	ServiceReference reference = 
		        		bundleContext.getServiceReference(IService.class.getName());
		 
		        consumer = new Client((IService) bundleContext.getService(reference));
		        consumer.startTimer();
			*/	    	
		    	this.context = bundleContext;

		    	 httpTracker = new ServiceTracker(bundleContext, HttpService.class.getName(), null) {
			   	      
			   		  public void removedService(ServiceReference reference, Object service) {
			   	        // HTTP service is no longer available, unregister our resources...
			   	        try {
			  // 	           ((IService) service).unregister("/static");
			   	        	((HttpService) (service)).unregister("");
			   	        } catch (IllegalArgumentException exception) {
			   	           // Ignore; servlet registration probably failed earlier on...
			   	        }
			   	      }

			   	      public Object addingService(ServiceReference reference) {
			   	        // HTTP service is available, register our resources...
			   	   	  
			   	        Servlet httpServlet = (HttpService) this.context.getService(reference);
				        try {
				        	httpService.registerServlet("/decl", httpServlet, null, null);
				        	} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
				        consumer.startTimer();
				        
			   	        /*
			   	        TestServlet testservlet = new TestServlet(); 
			   	        try {
			   	          httpService.registerServlet("/felixhttp", testservlet, null, null);
			   	        } catch (Exception exception) {
			   	          exception.printStackTrace();
			   	        }
			   	        */
			   	        return httpService;
			   	      }
			   	    };
			   	    // start tracking all HTTP services...
			   	    httpTracker.open();

			/*   	    
		    	 apiTracker = new ServiceTracker(bundleContext, IService.class.getName(), null) {
		   	      
		   		  public void removedService(ServiceReference reference, Object service) {
		   	        // HTTP service is no longer available, unregister our resources...
		   	        try {
		  // 	           ((IService) service).unregister("/static");
		   	        } catch (IllegalArgumentException exception) {
		   	           // Ignore; servlet registration probably failed earlier on...
		   	        }
		   	      }

		   	      public Object addingService(ServiceReference reference) {
		   	        // HTTP service is available, register our resources...
		   	        IService apiService = (IService) this.context.getService(reference);
			        try {
						consumer = new Client(apiService);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			        consumer.startTimer();
			        
		   	        return apiService;
		   	      }
		   	    };
		   	    // start tracking all HTTP services...
		   	    apiTracker.open();
		   	  */  
		    }
		    
		    
		    @Override
		    public void stop(BundleContext bundleContext) throws Exception {
		        consumer.stopTimer();
		    }
	}

